class Solution:
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
#         Approach 1: 	Time Limit Exceeded
        # def lcs(str1,str2):
        #     if (len(str1)<=0 or len(str2)<=0):
        #         return 0
        #     if (str1[0] == str2[0]):
        #         return lcs(str1[1:],str2[1:])+1
        #     else:
        #         return max(lcs(str1[1:],str2), lcs(str1,str2[1:]))
        # return len(word1)+len(word2)-2*lcs(word1,word2)
#         Approach 2:   use memo[][] to memory
        # m = len(word1)
        # n = len(word2)
        # memo = [[0 for col in range(m)] for row in range(n)]
        # def lcs(str1,str2,m,n):
        #     if (len(str1)<=0 or len(str2)<=0):
        #         return 0
        #     if (memo[m][n]>0):
        #         return memo[m][n]
        #     if (str1[0] == str2[0]):
        #         memo[m][n] = lcs(str1[1:],str2[1:],m-1,n-1)+1
        #     else:
        #         memo[m][n] = max(lcs(str1[1:],str2,m-1,n), lcs(str1,str2[1:],m,n-1))
        #     return memo[m][n]
        # return m+n-2*lcs(word1,word2, m-1,n-1)
        
        m = len(word1)
        n = len(word2)
        dp = [[0 for col in range(n+1)] for row in range(m+1)]
        for i in range(m+1):
            for j in range(n+1):
                if (i==0) or (j==0):
                    continue
                if (word1[i-1] == word2[j-1]):
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i][j-1], dp[i-1][j])
        return m+n-2*dp[m][n]
                
