# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if (head is None) or (head.next is None):
            return head
        fast, slow = head, head
        while(fast.next and fast.next.next):
            fast = fast.next.next
            slow = slow.next
        mid = slow.next
        slow.next = None

        return self.merge(self.sortList(head), self.sortList(mid))
        
    
    def merge(self, m1, m2):
        dumpy = ListNode(0)
        tail = ListNode(0)
        dumpy.next = tail
        while((m1 is not None) and (m2 is not None)):
            if (m1.val > m2.val):
                m1, m2 = m2, m1
            tail.next = m1
            tail = tail.next
            m1 = m1.next
        if (m1):
            tail.next = m1
        if (m2):
            tail.next = m2
        return dumpy.next.next
            
